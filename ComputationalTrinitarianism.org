#+TITLE: Computational Trinitarianism
#+AUTHOR: Vojtěch Štěpančík
#+latex_header: \usepackage{amsthm}
#+latex_header: \usepackage{tikz-cd}

#+begin_export latex
\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]

% Generic category
\newcommand{\Cat}[1]{\mathcal{#1}}
% Class of objects in a category
\newcommand{\Obj}[1]{\mathcal{O}(\Cat{#1})}
% Class of arrows in a category
\newcommand{\Arr}[1]{hom(\Cat{#1})}
% Source of an arrow
\newcommand{\src}[1]{src(#1)}
% Destination of an arrow
\newcommand{\dest}[1]{dest(#1)}
% Arrow composition
\newcommand{\comp}[2]{#1 \circ #2}
#+end_export

@@latex: \newpage@@
* Introduction
:PROPERTIES:
:UNNUMBERED:
:END:
This paper introduces the concept of /computational trinitarianism/, a term coined by Harper in \cite{HarperHT}, which presents a correspondence between ideas in logic, type theory, and category theory.

The usefulness of this idea is that new discoveries in one of the above mentioned fields have equivalents in the others, and finding these may provide new insights, triggering feedback loops and leading to more profound understandings of mathematics (TODO: wording?).

In the following sections, we focus on the links between the implicational fragment of intuitionistic propositional logic, the simply typed λ-calculus, and closed Cartesian categories.  

[[*Logic][Section 1]] introduces the logic used in the rest of the paper.
[[*Type theory][Section 2]] contains a summary of basic concepts of type theory, and presents the reader with a formulation of the simply typed λ-calculus.
In [[*Logic and Type theory][Section 3]], we note the correspondence between the logic and calculus described in preceding sections.
In order to define the categorical semantics of the calculus, first an introduction to category theory is provided in [[*Category theory][Section 4]], leading to the definition and explanation of the class of categories called Cartesian closed, and then the semantics are described in [[Types and Category theory][Section 5]].

@@latex: \newpage@@
* Logic

@@latex: \newpage@@
* Type theory

@@latex: \newpage@@
* Logic and Type theory

@@latex: \newpage@@
* Category theory

This chapter introduces concepts from category theory necessary to introduce categorical semantics for the calculus defined above.

#+name: category-def
#+begin_definition
A *category* $\Cat{K}$ is a pair of classes, namely the class of its objects, denoted $\Obj{K}$, and the class of the arrows between these objects, denoted $\Arr{K}$, with the following structure:

1. For every arrow $a \in \Arr{K}$, we can identify the source $\src a \in \Obj{K}$ and destination $\dest a \in \Obj{K}$ of that arrow. We often denote such an arrow graphically, so that if $\src a = X$ and $\dest a = Y$, we write
   \begin{tikzcd} X \arrow[r, "a"] & Y \end{tikzcd}
   or
   $a: X \to Y$.
2. For every object $X \in \Obj{K}$, there exists an arrow $id_X \in \Arr{K}$, called the identity arrow (or simply identity) on X, such that $\src{id_X} = \dest {id_X} = X$. We omit the subscript in situations where it can be inferred from the context.
3. For all arrows $a, b \in \Arr{K}$ where $\dest a = \src b$, their composition, denoted $\comp b a: \src a \to \dest b$ is also an arrow in $\Arr{K}$.

   1. This composition operator is associative. That is, for $a: X \to Y$, $b: Y \to Z$, $c: Z \to W$ in $\Arr{K}$, it is true that $\comp c (\comp b a) = \comp {(\comp c b)} a$

   2. The identity arrows are identities with respect to the composition operator. That is, for $a: X \to Y$ in $\Arr{K}$, the equality $\comp a id_X = a = \comp {id_Y} a$ holds.
#+end_definition

Examples:

#+begin_definition
A *small category*
#+end_definition
^ ?

#+begin_definition
A *functor* $F$ from $\Cat{K}$ to $\Cat{L}$, denoted $F: \Cat{K} \to \Cat{L}$, is a mapping between the categories $\Cat{K}$ and $\Cat{L}$, subject to the following properties:

1. To each object $X \in \Obj{K}$, it assigns an object $F(X) \in \Obj{L}$, often denoted just $FX$.
2. $F$ preserves sources and destinations, that is, to each arrow $a: X \to X' \in \Arr{K}$, it assigns an arrow $F(a): F(X) \to F(X')$, also denoted $Fa$.
3. $F$ preserves identity arrows, so for every object $X \in \Obj{K}$, it holds true that $F(id_X) = id_{F(X)}$.
4. $F$ preserves composition, so that for every pair of arrows $a: X \to Y, b: Y \to Z$ in $\Arr{K}$, the mapping of their composition under $F$ is the composition of their mapping under $F$, which is described by the following equivalence: $F(\comp b a) = \comp{F(b)}{F(a)}$.
#+end_definition

#+begin_definition
A *final object* is
#+end_definition
(also known as terminal object)

#+begin_definition
A *categorical product* is
#+end_definition

#+begin_definition
An *exponential object* is
#+end_definition

#+begin_definition
A *closed Cartesian category* is
#+end_definition

@@latex: \newpage@@
* Types and Category theory

* TODO List of common variable names
| Category             | $\Cat{K}$, $\Cat{L}$   |
| Object in a category | $X$, $Y$, $X'$         |
| Arrow in a category  | $a$, $b$, $a'$, $id_X$ |
| Functor              | $F$, $G$               |
| Final object         | $T$                    |


#+begin_export latex
\bibliography{ComputationalTrinitarianism}
\bibliographystyle{unsrt}
#+end_export

* COMMENT TODO [0/3]
- [ ] Examples of transferred ideas in [[*Introduction][Introduction]]
- [ ] Motivations for definitions
- [ ] Examples for categories
