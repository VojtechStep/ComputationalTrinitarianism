#+TITLE: Computational Trinitarianism
#+AUTHOR: Vojtěch Štěpančík
#+latex_header: \usepackage{amsthm}
#+latex_header: \usepackage{tikz-cd}

#+begin_export latex
\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]

% Generic category
\newcommand{\Cat}[1]{\mathcal{#1}}
% Class of objects in a category
\newcommand{\Obj}[1]{\mathcal{O}(\Cat{#1})}
% Class of arrows in a category
\newcommand{\Arr}[1]{hom(\Cat{#1})}
% Source of an arrow
\newcommand{\src}[1]{src(#1)}
% Destination of an arrow
\newcommand{\dest}[1]{dest(#1)}
% Arrow composition
\newcommand{\comp}[2]{#1 \circ #2}
% Hom set
\newcommand{\homset}[2]{hom(#1, #2)}
% Product factorizing morphism
\newcommand{\prodfact}[2]{\langle #1, #2 \rangle}
#+end_export

@@latex: \newpage@@
* Introduction
:PROPERTIES:
:UNNUMBERED:
:END:
This paper introduces the concept of /computational trinitarianism/, a term coined by Harper in a blog post \cite{HarperHT}, which presents a correspondence between ideas in logic, type theory, and category theory.

The usefulness of this idea is that new discoveries in one of the above mentioned fields have equivalents in the others, and finding these may provide new insights, triggering feedback loops and leading to more profound understandings of mathematics (TODO: wording?).

In the following sections, we focus on the links between the implicational fragment of intuitionistic propositional logic, the simply typed \lambda-calculus, and closed Cartesian categories.

[[*Logic][Section 1]] introduces the logic used in the rest of the paper.
[[*Type theory][Section 2]] contains a summary of basic concepts of type theory, and presents the reader with a formulation of the simply typed \lambda-calculus.
In [[*Logic and Type theory][Section 3]], we note the correspondence between the logic and calculus described in preceding sections.
In order to define the categorical semantics of the calculus, first an introduction to category theory is provided in [[*Category theory][Section 4]], leading to the definition and explanation of the class of categories called Cartesian closed, and then the semantics are described in [[Types and Category theory][Section 5]].

@@latex: \newpage@@
* Logic

@@latex: \newpage@@
* Type theory

@@latex: \newpage@@
* Logic and Type theory

@@latex: \newpage@@
* Category theory

This chapter introduces concepts from category theory necessary to introduce categorical semantics for the calculus defined above.

We start by defining what a category even /is/.

#+name: category-def
#+begin_definition
A *category* $\Cat{K}$ is a pair of classes, namely the class of its objects, denoted $\Obj{K}$, and the class of the arrows between these objects, denoted $\Arr{K}$, with the following structure:

1. For every arrow $a \in \Arr{K}$, we can identify the source $\src a \in \Obj{K}$ and destination $\dest a \in \Obj{K}$ of that arrow. We often denote such an arrow graphically, so that if $\src a = X$ and $\dest a = Y$, we write
   \begin{tikzcd} X \arrow[r, "a"] & Y \end{tikzcd}
   or
   $a: X \to Y$.
2. For every object $X \in \Obj{K}$, there exists an arrow $id_X \in \Arr{K}$, called the identity arrow (or simply identity) on X, such that $\src{id_X} = \dest {id_X} = X$. We omit the subscript in situations where it can be inferred from the context.
3. For all arrows $a, b \in \Arr{K}$ where $\dest a = \src b$, their composition, denoted $\comp b a: \src a \to \dest b$ is also an arrow in $\Arr{K}$.

   1. This composition operator is associative. That is, for $a: X \to Y$, $b: Y \to Z$, $c: Z \to W$ in $\Arr{K}$, it is true that $\comp c (\comp b a) = \comp {(\comp c b)} a$

   2. The identity arrows are identities with respect to the composition operator. That is, for $a: X \to Y$ in $\Arr{K}$, the equality $\comp a id_X = a = \comp {id_Y} a$ holds.
#+end_definition

As a convention, and unless the context demands otherwise, capital cursive letters from the middle of the alphabet are used for categories, capital letters from the end of the alphabet are used for objects and lowercase letters from the beginning of the alphabet are used for arrows, with an occasional apostrophe thrown in for cases where there's a need for additional dimension in differentiation.

We can think of a category as a collection of some unknown objects with arrows between them, with the additional structure that any object has an arrow pointing to itself, and a recipe to "correctly" paste one arrow after another to get a new one.

Since the requirements for being a category are quite lax, we can find many examples, some of which are listed below.

The category of sets, denoted *Set*, has sets for objects and set functions for arrows. We can see that 1. is satisfied by the fact that functions have a domain and a codomain associated with them. Futhermore, the identity function is defined for every set, and also behaves as an identity for function composition, which is associative, making *Set* a category.

A non-obvious observation is that every poset $P(A, \le)$ can be looked at as a category. The objects are the elements of the underlying set $A$, and an arrow between $x, y \in A$ either exists when $x \le y$, or it doesn't. Because the relation $\le$ is reflexive, it holds for every x in $A$ that $x \le x$, and because it is transitive, we know that if there is an arrow from $x$ to $y$ ($x \le y$) and one from $y$ to $z$ ($y \le z$), then there is also an arrow from $x$ to $z$ ($x \le z$). Since there can only be one arrow between any two objects, associativity and identity element are guaranteed for free. Categories which only permit one or zero arrows from one object to another are also called /thin/ or /posetal/.

Other examples of categories include those whose objects are some predefined algebras and the arrows are homomorphisms in said algebra, i.e. *Mon* for the category of monoids or *Grp* for the category of groups.

(TODO: Move the definitions to when they are needed and explained?)
#+begin_definition
A *locally small category* is a category in which the class of arrows between any two objects forms a set.
#+end_definition

#+begin_definition
A *hom-set* for a locally small category is the set of arrows $a: X \to Y$ for fixed $X$ and $Y$, denoted $\homset{X}{Y}$.
#+end_definition

# (TODO: Do we even need to define what a functor is?)
# #+begin_definition
# A *functor* $F$ from $\Cat{K}$ to $\Cat{L}$, denoted $F: \Cat{K} \to \Cat{L}$, is a mapping between the categories $\Cat{K}$ and $\Cat{L}$, subject to the following properties:

# 1. To each object $X \in \Obj{K}$, it assigns an object $F(X) \in \Obj{L}$, often denoted just $FX$.
# 2. To each arrow $a: X \to X' \in \Arr{K}$, it assigns an arrow $F(a): F(X) \to F(X') \in \Arr{L}$, often denoted just $Fa$.
# 3. $F$ preserves identity arrows, so for every object $X \in \Obj{K}$, it holds true that $F(id_X) = id_{F(X)}$.
# 4. $F$ preserves composition, so that for every pair of arrows $a: X \to Y, b: Y \to Z$ in $\Arr{K}$, the mapping of their composition under $F$ is the composition of their mapping under $F$, which is described by the following equivalence: $F(\comp b a) = \comp{F(b)}{F(a)}$.
# #+end_definition

Now that we are able to talk about categories and objects, we can define operations on them. One such operation we need for the purposes of this paper is the product, which is a generalization of the Cartesian product from set theory, lifted into categories.

#+begin_definition
A *categorical product* of two objects $X$ and $Y$ in a category $\Cat{K}$ is another object in the same category, often denoted $X \times Y$, equipped with two arrows, $\pi_X: X \times Y \to X$ and $\pi_Y: X \times Y \to Y$, satisfying the following property:

For every other object $W \in \Obj{K}$ and a pair of arrows $p: W \to X$ and $q: W \to Y$, there exists a unique arrow $m: W \to X \times Y$ that factorizes $p$ and $q$ through $X \times Y$. That is to say, $p = \comp{\pi_X}{m}$ and $q = \comp{\pi_Y}{m}$. This factorizing arrow is also denoted $\prodfact{p}{q}$.
#+end_definition

We can see why the Cartesian product of two sets $X$ and $Y$ is the product of the corresponding objects in the category *Set*: First of all, the Cartesian product $X \times Y$ is itself a set, so it is a valid object in *Set*, and we can look at individual members of any tuple therein, giving us the two projection into its components. Secondly, if we are given another set $W$ with functions $p$ and $q$ into $X$ and $Y$ respectively, we can construct a function into the product by taking the images under both $p$ and $q$ and packaging them into a tuple: $m(w) = (p(w), q(w))$. It's trivial to see that the arrows line up.

Another example that may not be obvious at first is the meet of two objects in a posetal category. The definition of a posetal category tells us that a factoring arrow either exists or doesn't, so the definition amounts to finding an object that is less than $X$ and $Y$ and with the property that every other object that is less than both $X$ and $Y$ is also less than the product, which is exactly the definition of a meet.

#+begin_definition
A *final object* (also called *terminal object* or *1*) is an object for which there is exactly one arrow pointing to it from any other object in the same category.
#+end_definition
Examples:

- singleton set in *Set*
- maximal element in a poset

#+begin_definition
An *exponential* of two objects $X$ and $Y$ in a category $\Cat{K}$ is another object in the same category, often denoted $X^Y$, equipped with an arrow $eval: X^Y \times Y \to X$, satisfying the following property:

For every other object $Z$ in $\Obj{K}$ and an arrow $h: Z \times Y \to X$, there exists a unique arrow $h^\flat: Z \to X^Y$
#+end_definition



Examples:
- a function set in *Set*
- ... TODO: mention others?

#+begin_definition
A *closed Cartesian category* $\Cat{K}$ is a category satisfying the following properties:

1. $\Cat{K}$ has a terminal object
2. For each pair of objects $X, Y \in \Obj{K}$, their product $X \times Y$ exists in $\Cat{K}$
3. For each pair of objects $X, Y \in \Obj{K}$, their exponent $X^Y$ exists in $\Cat{K}$
#+end_definition

@@latex: \newpage@@
* Types and Category theory

* TODO List of common variable names
| Category             | $\Cat{K}$, $\Cat{L}$   |
| Object in a category | $X$, $Y$, $X'$         |
| Arrow in a category  | $a$, $b$, $a'$, $id_X$ |
| Functor              | $F$, $G$               |
| Final object         | $T$                    |


#+begin_export latex
\bibliography{ComputationalTrinitarianism}
\bibliographystyle{unsrt}
#+end_export

* COMMENT TODO [1/3]
- [ ] Examples of transferred ideas in [[*Introduction][Introduction]]
- [ ] Motivations for definitions
- [X] Examples for categories
