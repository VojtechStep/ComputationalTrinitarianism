#+TITLE: Computational Trinitarianism
#+AUTHOR: Vojtěch Štěpančík
#+STARTUP: showall
#+latex_header: \usepackage[doublespacing]{setspace}
#+latex_header: \usepackage{amsthm}
#+latex_header: \usepackage{tikz-cd}
#+latex_header: \usepackage{prftree}
#+latex_header: \usepackage{stmaryrd}
#+latex_header: \usepackage{apacite}

#+begin_export latex
\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]

\newcommand{\stl}{\lambda^{\to}_{\ProdTypeCon}}

% Introduction rule
\newcommand{\Intro}[1]{$#1$-I}
% Elimination rule
\newcommand{\Elim}[1]{$#1$-E}

% Product type
\newcommand{\ProdTypeCon}{\land}
\newcommand{\ProdType}[2]{#1 \ProdTypeCon #2}
\newcommand{\ProdTypeFst}[1]{fst(#1)}
\newcommand{\ProdTypeSnd}[1]{snd(#1)}

% Generic category
\newcommand{\Cat}[1]{\mathcal{#1}}
% Class of objects in a category
\newcommand{\Obj}[1]{\mathcal{O}(\Cat{#1})}
% Class of arrows in a category
\newcommand{\Arr}[1]{hom(\Cat{#1})}
% Source of an arrow
\newcommand{\src}[1]{src(#1)}
% Destination of an arrow
\newcommand{\dest}[1]{dest(#1)}
% Arrow composition
\newcommand{\comp}[2]{#1 \circ #2}
% Hom set
\newcommand{\homset}[2]{hom(#1, #2)}
% Product factorizing morphism
\newcommand{\prodfact}[2]{\langle #1, #2 \rangle}

% Interpretation
\newcommand{\Int}[1]{\llbracket #1 \rrbracket}

% Definition
\newcommand{\Def}{\equiv_{def}}
#+end_export

@@latex: \newpage@@
* Introduction
:PROPERTIES:
:UNNUMBERED:
:END:
This paper introduces the concept of /computational trinitarianism/, a term coined in \cite{Harper2011}, which presents a correspondence between ideas in logic, type theory, and category theory.

The usefulness of this idea is that new discoveries in one of the above mentioned fields have equivalents in the others, allowing to transfer results between the respective areas.

In the following sections, we focus on the links between the meet-implicational fragment of intuitionistic propositional logic, further referred to as intuitionistic logic, the simply typed \lambda-calculus with product types, further referred to as \(\stl\)-calculus, and Cartesian closed categories.

[[*Logic][Section 1]] introduces the logic used in the rest of the paper.
[[*Type theory][Section 2]] contains a summary of basic concepts of type theory, and presents the reader with a formulation of the \(\stl\)-calculus.
In [[*Logic and Type theory][Section 3]], we note the correspondence between the logic and calculus described in preceding sections.
In order to define the categorical semantics of the calculus, first an introduction to category theory is provided in [[*Category theory][Section 4]], leading to the definition and explanation of Cartesian closed categories. The semantics of the calculus are described in [[Types and Category theory][Section 5]].

@@latex: \newpage@@
* Logic

Intuitionistic logic is a system that differs from classical logic by being construction-aware. This is reflected in the formulation of the rewriting rules for operating on formulas, which do not include the law of excluded middle from classical logic. The formula $A \lor \neg A$ is always true in classical logic, because every proposition has to be by definition either true or false, but not so in intuitionistic logic. To /construct/ a proof of $A \lor \neg A$, one would actually need to present either a proof of $A$ or a proof of $\neg A$. In this way, every proposition that is not an assumption must be accompanied by a proof "constructed" from proofs of its subformulas. For a more in-depth treatment, see \cite[Chapter 2]{Sorensen2006}.

Proofs are constructed by sequencing derivation rules. For every connective in the specific logic, the derivation rules describe a way to introduce a formula with the connective (introduction rules, or construction), and a way to reduce a formula using the connective so that it doesn't contain it any longer (elimination rules, or deconstruction).

A derivation rule consists of a derivation line, a list of judgments above it and one judgment below. The judgments on top are called /premises/, and the judgment on the bottom is called a /conclusion/.

A judgment has the form $\Gamma \vdash A$, where $\Gamma$ is a list of assumptions called /context/, whose behavior is specified by special deduction rules called /structural/ rules, introduced below, and $A$ is a proposition that is true when the assumptions hold.

Contexts can be merged using a comma, joining $\Gamma$ and $\Delta$ into $\Gamma,\Delta$ with the meaning that for the proposition on the right side of the turnstile to hold, all the assumptions in both \Gamma and \Delta must hold.

Derivation rules give a recipe for rewriting judgments regardless of semantic interpretation, purely in the context of the syntax of the logic it describes.

The rules for the logic we focus on are described in Figure [[fig:logic_derivations]]. The rule \Intro{\land}, read /conjunction introduction/, says that when one can deduce $A$ and $B$, then the same proofs lead to $A \land B$. The two elimination rules for the conjunction state that once a proof of $A \land B$ is given, either of its subformulas can be held to be true in further proofs.

The idea behind \Intro{\to} is such that if a proposition depends on its assumptions, one can remove a proposition $A$ from the context, and instead state that when $A$ is true, then the original proposition is also true. \Elim{\to} is also known as /modus ponens/, and it states that when the antecedent in the implication can be proved to be true, then the consequent holds.

#+name: fig:logic_derivations
#+caption: Derivation rules for the implicative fragment of intuitionistic propositional logic with conjunction
#+begin_figure
$$
\prftree[r]{Id}
{A \vdash A}
$$

$$
\prftree[r]{\Intro{\land}}
{\Gamma \vdash A}
{}
{\Delta \vdash B}
{\Gamma, \Delta \vdash A \land B}
\hspace{1cm}
\prftree[r]{\Elim{\land}$_1$}
{\Gamma \vdash A \land B}
{\Gamma \vdash A}
\hspace{1cm}
\prftree[r]{\Elim{\land}$_2$}
{\Gamma \vdash A \land B}
{\Gamma \vdash B}
$$

$$
\prftree[r]{\Intro{\to}}
{\Gamma, A \vdash B}
{\Gamma \vdash A \to B}
\hspace{1cm}
\prftree[r]{\Elim{\to}}
{\Gamma \vdash A \to B}
{}
{\Delta \vdash A}
{\Gamma, \Delta \vdash B}
$$
#+end_figure

For operating on the context alone, without changing the proposition, we introduce three structural rules, which syntactically encode semantics similar to finite sets. Weakening allows one to add arbitrary assumptions to the context without invalidating the derived proposition. Contraction states that duplicates in the context can be removed. Exchange asserts that the order in which assumptions appear in the context is irrelevant. The formal rules are listed in Figure [[fig:logic_struct]].

#+name: fig:logic_struct
#+caption: Structural rules for intuitionistic logic
#+begin_figure
$$
\prftree[r]{Weak}
{\Gamma \vdash A}
{\Gamma, B \vdash A}
\hspace{1cm}
\prftree[r]{Contr}
{\Gamma, A, A \vdash B}
{\Gamma, A \vdash B}
$$

$$
\prftree[r]{Exch}
{\Gamma, \Delta \vdash A}
{\Delta, \Gamma \vdash A}
$$
#+end_figure

When building a new proof from existing parts, we can sometimes produce proofs with redundancies. This happens when a rule for introducing a connective is applied, and then the connective is eliminated in the very next step. To simplify proofs, we introduce rewriting rules for proof reduction, which are described in Figure [[fig:proof_reduct]].

Two reduction rules for the conjunction exist, but only one is shown, the other is defined symmetrically. It describes a situation where an existing proof of $A$ is combined with a proof of $B$ to prove the conjunction, and then asks for $A$ back. In that case, there is no reason for $B$ to appear at all, and the proof can forget that branch altogether.

The idea behind reduction of implication is that if there is a proof of $A$ in some context $\Delta$, and another proof has $A$ as an assumption, then one can directly substitute the assumption of $A$ for its proof in the derivation tree for $B$, merging the assumption contexts.

#+name: fig:proof_reduct
#+caption: Proof reduction rules
#+begin_figure
$$
\prftree[r]{\Elim{\land}$_1$}
{\prftree[r]{\Intro{\land}}
{A \vdash A}
{}
{B \vdash B}
{A,B \vdash A \land B}}
{A,B \vdash A}
\hspace{1cm}\Rightarrow\hspace{1cm}
\prftree[r]{Weak}
{A \vdash A}
{A, B \vdash A}
$$

$$
\prftree[r]{\Elim{\to}}
{\prftree[r]{\Intro{\to}}
{\Gamma, A \vdash B}
{\Gamma \vdash A \to B}}
{}
{\Delta \vdash A}
{\hspace{1.5em}}
{\Gamma, \Delta \vdash B}
\hspace{1cm}\Rightarrow\hspace{1cm}
\Gamma, \Delta \vdash B
$$
#+end_figure

* Type theory

Type theory is a study of formal systems in which terms have an associated label called /type/, and rules for constructing the terms include the description of their behavior on the types. For more information on the subject, see \cite{Thompson1991} and \cite{PerLof1980}.

More precisely, in constructive mathematics, a mathematical object is created by construction, and the type of an object is the type of construction used to create it \cite{Bauer2018}.

One such type system is the simply typed \lambda-calculus, or STLC, which extends the untyped \lambda-calculus by introducing a set of /base types/, and inductively generates all its types with the $\to$ binary type operator, where the type $A \to B$ is the type of functions from type $A$ to type $B$. A term $t$ of type $A$ is expressed as $t: A$.

The STLC recognizes three forms for its terms, very much like the untyped \lambda-calculus. These are /variables/, of the form $x: A$, where $x$ is an atom and $A$ is a type, then /abstractions/, which represent functions, and have the form $\lambda x.t: A \to B$, where $x: A$, $t: B$, and $x$ is a free variable in $t$, becoming bound by the abstraction. Finally, abstractions can be used in an /application/, which, given the terms $f: A \to B$ and $t: A$, yields the term $f(t): B$. Application forms can be further simplified by performing /\(\beta\)-reduction/, defined using term substitution as $(\lambda x.t)(s) \to t[s/x]$, where free occurrences of $x$ in $t$ are rewritten to $s$. Performing a reduction is synonymous with /evaluating/ a program.

We define an extension of the simply typed \lambda-calculus by introducing the binary product type operator $\ProdTypeCon$, producing types of the form $\ProdType{A}{B}$, which represent tuples of one object of type $A$ and one object of type $B$. We call this extension the \(\stl\)-calculus, and the construction rules are listed in Figure [[fig:type_derivation]].

#+name: fig:type_derivation
#+caption: Derivation rules for the \(\stl\)-calculus
#+begin_figure
$$
\prftree[r]{Id}
{x: A \vdash x: A}
$$

$$
\prftree[r]{\Intro{\ProdTypeCon}}
{\Gamma \vdash x: A}
{}
{\Delta \vdash y: B}
{\Gamma, \Delta \vdash \prodfact{x}{y}: \ProdType{A}{B}}
\hspace{0.5cm}
\prftree[r]{\Elim{\ProdTypeCon}$_1$}
{\Gamma \vdash t: \ProdType{A}{B}}
{\Gamma \vdash \ProdTypeFst{t}: A}
\hspace{0.5cm}
\prftree[r]{\Elim{\ProdTypeCon}$_2$}
{\Gamma \vdash t: \ProdType{A}{B}}
{\Gamma \vdash \ProdTypeSnd{t}: B}
$$

$$
\prftree[r]{\Intro{\to}}
{\Gamma, x: A \vdash t: B}
{\Gamma \vdash \lambda x.t: A \to B}
\hspace{0.5cm}
\prftree[r]{\Elim{\to}}
{\Gamma \vdash f: A \to B}
{\Delta \vdash t: A}
{\Gamma, \Delta \vdash f(t): B}
$$
#+end_figure

The new forms introduced are /tuples/, written as $\prodfact{x}{y}: \ProdType{A}{B}$, which represent a pair of terms, and left and right /projections/, written as $\ProdTypeFst{t}: A$ and $\ProdTypeSnd{t}: B$, respectively, assuming a term $t: \ProdType{A}{B}$. This new syntax allows for more redundant forms of terms, which can be simplified using /\(\pi\)-reduction/ via the evaluation steps $\ProdTypeFst{\prodfact{x}{y}} \to x$ and $\ProdTypeSnd{\prodfact{x}{y}} \to y$.

The language is once again described with derivation rules, with zero or more premises above and one conclusion below the line. The context in a judgment now stands for a collection of typed variables, and contains the variables that are free in the term on the right side of the turnstile. In this way, the \Intro{\to} rule can be intuitively interpreted by taking a variable $x: A$, and instead of treating it as free, we remove it from the context and bind it with an abstraction.

* Logic and Type theory

Looking at figures [[fig:logic_derivations]] and [[fig:type_derivation]], one can observe some similarity. Indeed, if we were to remove the terms from the derivation rules for the \(\stl\)-calculus, the two would be exactly the same. In other words, the /types/ serve the same role as /propositions/, which is where the idea of "propositions are types" came from. Many works have been published on this topic, see for example \cite[Chapter 4]{Sorensen2006} or \cite{Thompson1991}.

However, the correspondence goes deeper. Every form of a term in the calculus has exactly one rule that creates it, therefore looking at the program in the conclusion of a derivation tree has one-to-one correspondence with the tree itself. Since the tree is how intuitionistic logic represents a proof, one comes to the conclusion that "programs are proofs". A corollary of this statement is that determining whether a proposition in the logic is provable is the same as deciding if a type in the corresponding type theory is inhabitable.

The final level of the correspondence is one between the reduction operations of proofs and terms. \pi-reductions of a term correspond to a reduction of a proof that introduces and then throws away a conjunction, and reducing a implication in a proof has the exact same effect as substituting the argument variable with its value in the term under \beta-reduction.

For a historical overview of the matter see \cite{Wadler2015}.

* Category theory

This chapter introduces concepts from category theory necessary to introduce categorical semantics for the calculus defined above. For a more complete reference on category theory, see \cite{Lane1998}, \cite{Adamek1990} or \cite{Barr1990}.

We start by defining what a category even /is/.

#+name: category-def
#+begin_definition
A *category* $\Cat{K}$ is a pair of classes, namely the class of its objects, denoted $\Obj{K}$, and the class of the arrows between these objects, denoted $\Arr{K}$, with the following structure:

1. For every arrow $a \in \Arr{K}$, we can identify the source $\src a \in \Obj{K}$ and destination $\dest a \in \Obj{K}$ of that arrow. We often denote such an arrow graphically, so that if $\src a = X$ and $\dest a = Y$, we write
   \begin{tikzcd} X \arrow[r, "a"] & Y \end{tikzcd}
   or
   $a: X \to Y$.
2. For every object $X \in \Obj{K}$, there exists an arrow $id_X \in \Arr{K}$, called the identity arrow (or simply identity) on X, such that $\src{id_X} = \dest {id_X} = X$. We omit the subscript in situations where it can be inferred from context.
3. For all arrows $a, b \in \Arr{K}$ where $\dest a = \src b$, their composition, denoted $\comp b a: \src a \to \dest b$ is also an arrow in $\Arr{K}$.

   1. This composition operator is associative. That is, for $a: X \to Y$, $b: Y \to Z$, $c: Z \to W$ in $\Arr{K}$, it is true that $\comp c (\comp b a) = \comp {(\comp c b)} a$

   2. The identity arrows are identities with respect to the composition operator. That is, for $a: X \to Y$ in $\Arr{K}$, the equality $\comp a id_X = a = \comp {id_Y} a$ holds.
#+end_definition

As a convention, and unless the context demands otherwise, capital cursive letters from the middle of the alphabet are used for categories, capital letters from the end of the alphabet are used for objects and lowercase letters from the beginning of the alphabet are used for arrows.

We can think of a category as a collection of some unknown objects with arrows between them, with the additional structure that any object has an arrow pointing to itself, and a recipe to "correctly" paste one arrow after another to get a new one.

Since the requirements for being a category are quite lax, we can find many examples, some of which are listed below.

The category of sets, denoted *Set*, has sets for objects and set functions for arrows. We can see that 1. is satisfied by the fact that functions have a domain and a codomain associated with them. Furthermore, the identity function is defined for every set, and also behaves as an identity for function composition, which is associative, making *Set* a category.

A non-obvious observation is that every poset $P(A, \le)$ can be looked at as a category. The objects are the elements of the underlying set $A$, and an arrow between $x, y \in A$ either exists when $x \le y$, or it doesn't. Because the relation $\le$ is reflexive, it holds for every x in $A$ that $x \le x$, and because it is transitive, we know that if there is an arrow from $x$ to $y$ ($x \le y$) and one from $y$ to $z$ ($y \le z$), then there is also an arrow from $x$ to $z$ ($x \le z$). Since there can only be one arrow between any two objects, associativity and identity element are guaranteed for free. Categories which only permit one or zero arrows from one object to another are also called /thin/ or /posetal/.

Other examples of categories include those whose objects are some predefined algebras and the arrows are homomorphisms of said algebras, i.e. *Mon* for the category of monoids or *Grp* for the category of groups.

Equipped with a notion of a category, we can define operations on objects in an arbitrary category. One such operation we need for the purposes of this paper is the product, which is a generalization of the Cartesian product from set theory.

#+begin_definition
A *categorical product* of two objects $X$ and $Y$ in a category $\Cat{K}$ is another object in the same category, often denoted $X \times Y$, equipped with two arrows, $\pi_X: X \times Y \to X$ and $\pi_Y: X \times Y \to Y$, satisfying the following property:

For every other object $W \in \Obj{K}$ and a pair of arrows $p: W \to X$ and $q: W \to Y$, there exists a unique arrow $m: W \to X \times Y$ that factorizes $p$ and $q$ through $X \times Y$. That is, the equalities $p = \comp{\pi_X}{m}$ and $q = \comp{\pi_Y}{m}$ hold. This factorizing arrow is also denoted $\prodfact{p}{q}$.
#+end_definition

We can see why the Cartesian product of two sets $X$ and $Y$ is the product of the corresponding objects in the category *Set*: First of all, the Cartesian product $X \times Y$ is itself a set, so it is a valid object in *Set*, and we can look at individual members of any tuple therein, giving us the two projection onto its components. Secondly, if we are given another set $W$ with functions $p$ and $q$ into $X$ and $Y$ respectively, we can construct a function into the product by taking the images under both $p$ and $q$ and packaging them into a tuple: $m(w) = (p(w), q(w))$. It is trivial to see that the arrows line up.

Another example that may not be obvious at first is the meet of two objects in a posetal category. The definition of a posetal category tells us that a factoring arrow either exists or doesn't, so the definition amounts to finding an object that is less than $X$ and $Y$ and with the property that every other object that is less than both $X$ and $Y$ is also less than the product, which is exactly the definition of a meet.

The binary product can be naturally extended to a product of any finite number of objects greater than two.

#+begin_definition
A *final object* (also called *terminal object* or $1$) is an object for which there is exactly one arrow pointing to it from every other object in the same category.
#+end_definition

In *Set*, the final object is the singleton set, since from every other set, there is a function projecting every element to the single element of the singleton set.
Similarly in a posetal category, the final object is such an element that all other objects are less than or equal, which amounts to the definition of the greatest element.

The final object is the identity element for the categorical product, that is to say $X \times 1 \cong X \cong 1 \times X$. Given any object $X$, we have the identity arrow $id_X: X \to X$, and the unique arrow going to $1$, denoted $const_X: X \to 1$. Then, for every other object $Y$ and a pair of arrows $p: Y \to X$ and $q: Y \to 1$, we reason that $q = const_Y$, because there is only one arrow from $Y$ to $1$, and that the factoring arrow is $p$ itself, since the identity can be composed with arrows without effect, achieving $p = \comp{p}{id_X}$.

Having an identity element to the categorical product, we can intuitively define nullary and unary products of an object $X$ as the final object and $X$ itself, respectively.

#+begin_definition
An *exponential* of two objects $X$ and $Y$ in a category $\Cat{K}$ is another object in the same category, often denoted $X^Y$, equipped with an arrow $eval: X^Y \times Y \to X$, satisfying the following property:

For every other object $Z$ in $\Obj{K}$ and an arrow $h: Z \times Y \to X$, there exists a unique arrow $h^\flat: Z \to X^Y$, satisfying the equality $\comp{eval}{(h^\flat \times Y)} = h$, where by $h^\flat \times Y$ we mean the projection of components $\prodfact{\comp{h^\flat}{\pi_1}}{\comp{id_Y}{\pi_2}}$.
#+end_definition

Exponentials serve as an abstraction of functions, allowing one to represent arrows between two objects as another object in the same category. This is hinted at by the suggestive naming of the arrow $eval$, whose name stems from its role of taking a "function" object and an "argument" object, and "applying" the second to the first. In this light, the property in the definition can be seen as introducing currying, a term familiar to many functional programmers, which states that a function taking a tuple, essentially two arguments, can be partially applied, or provided with just one argument, returning another function that needs to be supplied with the other argument in order to be evaluated.


#+begin_definition
A *Cartesian closed category* $\Cat{K}$ is a category satisfying the following properties:

1. $\Cat{K}$ has all finite products
2. For every pair of objects $X, Y \in \Obj{K}$, their exponent $X^Y$ exists in $\Cat{K}$
#+end_definition

A Cartesian closed category is therefore a category that has a final object, all binary products, and the arrows between two objects have a concrete representation in the form of another object in the category.

* Types and Category theory

Cartesian closed categories (CCC's) offer a categorical model for the \(\stl\)-calculus, which is more general than the conventional set-theoretical interpretation. This section introduces the semantics for this calculus, for a more general treatment see \cite{Crole1993} and \cite{Crole1993der}.

We interpret types in the calculus as objects in a general CCC. A product type $\ProdType{A}{B}$ is represented by the categorical product $A \times B$. A function type $A \to B$ is represented by the exponential $B^A$.

Contexts are interpreted as categorical products of the objects corresponding to the types of the variables it contains. Terms in a context $\Gamma \vdash t: A$ are the arrows in the category, and go from the object representing $\Gamma$ to the object representing $A$.

The identity arrow, defined on every object, is guaranteed by the derivation rule Id, which states that every variable can be used to deduce itself, and its term is $x: A \vdash x: A$.

Arrow composition is defined by term substitution. Two terms-in-contexts $x: A \vdash t: B$ and $y: B \vdash s: C$ correspond to the arrows $\Int{x: A \vdash t: B}: A \to B$ and $\Int{y: B \vdash s: C}: B \to C$, and their composition corresponds to the term $\Int{x: A \vdash s[t/y]: C}: A \to C$, in which occurrences of the variable $y: B$ have been substituted by the term $t: B$.

With three terms $x: A \vdash t: B$, $y: B \vdash s: C$ and $z: C \vdash u: D$, and their respective interpretations as arrows called $a$, $b$ and $c$, we can perform the substitution in two different orders, either $x: A \vdash (u[s/z])[t/y]: D$, corresponding to $\comp{{(\comp{h}{g})}}{f}$, or $x: A \vdash u[s[t/y]/z]: D$, corresponding to $\comp{h}{(\comp{g}{f})}$. Structural induction shows that these two terms are indeed syntactically equal, so the composition is associative (proof left as an exercise to the reader).

The identity arrow does indeed behave like the left and right identity to composition, which can be shown by posing $id_A: A \to A \Def \Int{x: A \vdash x: A}$, $a: A \to B \Def \Int{x: A \vdash t: B}$ and $id_B: B \to B \Def \Int{y: B \vdash y: B}$, and verifying that $\comp{id_B}{a} \Def \Int{x: A \vdash y[t/y]: B}$ is the same as $a$, and similarly for $\comp{a}{id_A} \Def \Int{x: A \vdash t[x/x]}$.

Moving onto the product constructs of the calculus, the introduction is rationalized by the factorizing property of the product. Given two terms $\Gamma \vdash x: A$ and $\Delta \vdash y: B$, one can extend their corresponding arrows to begin in the object $\Gamma \times \Delta$ by using appropriate projections, and then the term $\Gamma, \Delta \vdash \prodfact{x}{y}: \ProdType{A}{B}$ has the unique representation by the factorizing arrow $\prodfact{\comp{\Int{\Gamma \vdash x: A}}{\pi_1}}{\comp{\Int{\Delta \vdash y: B}}{\pi_2}}$. A diagram of the \Intro{\ProdTypeCon} rule is shown in Figure [[fig:product_intro_diag]]. The product elimination rules are identified with the projection arrows from the categorical product.

#+name: fig:product_intro_diag
#+caption: \Intro{\ProdTypeCon} rule
#+begin_figure
#+begin_displaymath
\begin{tikzcd}
  &                                               & \Gamma \times \Delta \arrow[ld, "\pi_1"] \arrow[rd, "\pi_2"] \arrow[dd, "\prodfact{\dots}{\dots}"] &                                               &   \\
  & \Gamma \arrow[ld, "\Int{\Gamma \vdash x: A}"] &                                                                                                   & \Delta \arrow[rd, "\Int{\Delta \vdash y: B}"] &   \\
A &                                               & A \times B \arrow[ll, "\pi_1"] \arrow[rr, "\pi_2"]                                                &                                               & B
\end{tikzcd}
#+end_displaymath
#+end_figure

Interpretations of the function constructs are backed by the properties of the exponential. Given a term-in-context $\Gamma, x: A \vdash t: B$, the corresponding arrow is $h: \Gamma \times A \to B \Def \Int{\Gamma, x: A \vdash t: B}$, and the appropriate function term $\Gamma \vdash \lambda x.t: A \to B$ is represented by the unique arrow $h^\flat$ that is required to exist by the exponential property, going from $\Gamma$ to $B^A$.

Function application, where one is provided with the terms $\Gamma \vdash f: A \to B$ and $\Delta \vdash t: A$, is interpreted by taking the product object $\Gamma \times \Delta$, mapping it by components to $B^A \times A$ in much the same way as product introduction, and then applying the $eval$ arrow to the object $B$, giving the term $\Gamma, \Delta \vdash f(t)$ the interpretation of $\comp{eval}{\prodfact{\comp{\Int{\Gamma \vdash f: A \to B}}{\pi_1}}{\comp{\Int{\Delta \vdash t: A}}{\pi_2}}}$. A diagram of this composition is shown in Figure [[fig:function_app_diag]].

#+name: fig:function_app_diag
#+caption: \Elim{\to} rule
#+begin_figure
#+begin_displaymath
\begin{tikzcd}
\Gamma \times \Delta \arrow[d, "\prodfact{\dots}{\dots}"'] \arrow[rd, "{\Int{\Gamma, \Delta \vdash f(t): B}} = \comp{eval}{\prodfact{\comp{\Int{\Gamma \vdash f: A \to B}}{\pi_1}}{\comp{\Int{\Delta \vdash t: A}}{\pi_2}}}"] &   \\
B^A \times A \arrow[r, "eval"'] & B
\end{tikzcd}
#+end_displaymath
#+end_figure


* Appendix A: List of common variable names

| Proposition, Type    | $A$, $B$               |
| Context              | \Gamma, \Delta         |
| Variable             | $x$, $y$               |
| Term                 | $s$, $t$               |
| Category             | $\Cat{K}$, $\Cat{L}$   |
| Object in a category | $X$, $Y$, $X'$         |
| Arrow in a category  | $a$, $b$, $a'$, $id_X$ |
| Final object         | $T$                    |


#+begin_export latex
\bibliography{ComputationalTrinitarianism}
\bibliographystyle{apacite}
#+end_export

* COMMENT TODO [4/4]
- [X] Proof reduction
- [X] Motivations for definitions
- [X] Examples for categories
- [X] Sources
